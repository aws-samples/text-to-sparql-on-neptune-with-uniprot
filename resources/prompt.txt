Human: Your task is to convert an English language description of a question into a SPARQL query against the Uniprot knowledgebase that answers the question. You must include your answer in a <sparql></sparql> tag pair. You don't need to add the PREFIX lines, I'll add those.

Some examples:

<question>
Select all taxa from the UniProt taxonomy.
</question>

<sparql>
SELECT ?taxon
WHERE
{
    ?taxon a up:Taxon .
}
</sparql>

<question>
Select all bacterial taxa and their scientific names from the UniProt taxonomy
</question>
<sparql>
SELECT ?taxon ?name
WHERE
{
    ?taxon a up:Taxon .
    ?taxon up:scientificName ?name .
    ?taxon rdfs:subClassOf taxon:2 .
}
</sparql>

<question>
Select all UniProt entries, and their organism and amino acid sequences (including isoforms), for _E. coli K12_ and all its strains
</question>
<sparql>
SELECT ?protein ?organism ?isoform ?aa_sequence
WHERE
{
    ?protein a up:Protein .
    ?protein up:organism ?organism .
    ?organism rdfs:subClassOf taxon:83333 .
    ?protein up:sequence ?isoform .
    ?isoform rdf:value ?aa_sequence .
}
</sparql>

<question>
Select the UniProt entry with the mnemonic 'A4_HUMAN'
</question>

<sparql>
SELECT ?protein
WHERE
{
    ?protein a up:Protein .
    ?protein up:mnemonic 'A4_HUMAN'
}
</sparql>

<question>
Select a mapping of UniProt to PDB entries using the UniProt cross-references to the PDB database.
</question>
<sparql>
SELECT ?protein ?db
WHERE
{
    ?protein a up:Protein ;
    up:classifiedWith keywords:5 ;
    rdfs:seeAlso ?db .
    ?db up:database <http://purl.uniprot.org/database/PDB>
}
</sparql>

<question>
Select all cross-references to external databases of the category '3D structure databases' of UniProt entries that are classified with the keyword 'Acetoin biosynthesis (KW-0005)'
</question>
<sparql>
SELECT DISTINCT ?link
WHERE
{
    ?protein a up:Protein .
    ?protein up:classifiedWith keywords:5 .
    ?protein rdfs:seeAlso ?link .
    ?link up:database ?db .
    ?db up:category '3D structure databases'
}
</sparql>

<question>
Select reviewed UniProt entries (Swiss-Prot), and their recommended protein name, that have a preferred gene name that contains the text 'DNA'
</question>
<sparql>
SELECT ?protein ?name
WHERE
{
    ?protein a up:Protein .
    ?protein up:reviewed true .
    ?protein up:recommendedName ?recommended .
    ?recommended up:fullName ?name .
    ?protein up:encodedBy ?gene .
    ?gene skos:prefLabel ?text .
    FILTER CONTAINS(?text, 'DNA')
}
</sparql>

<question>
Select the preferred gene name and disease annotation of all human UniProt entries that are known to be involved in a disease
</question>
<sparql>
SELECT ?name ?text
WHERE
{
    ?protein a up:Protein .
    ?protein up:organism taxon:9606 .
    ?protein up:encodedBy ?gene .
    ?gene skos:prefLabel ?name .
    ?protein up:annotation ?annotation .
    ?annotation a up:Disease_Annotation .
    ?annotation rdfs:comment ?text
}
</sparql>

<question>
Select all human UniProt entries with a sequence variant that leads to a 'loss of function'
</question>
<sparql>
SELECT ?protein ?text
WHERE
{
    ?protein a up:Protein .
    ?protein up:organism taxon:9606 .
    ?protein up:annotation ?annotation .
    ?annotation a up:Natural_Variant_Annotation .
    ?annotation rdfs:comment ?text .
    FILTER (CONTAINS(?text, 'loss of function'))
}
</sparql>

<question>
Select all human UniProt entries with a sequence variant that leads to a tyrosine to phenylalanine substitution
</question>
<sparql>
SELECT ?protein ?annotation ?begin ?text
WHERE
{
    ?protein a up:Protein ;
    up:organism taxon:9606 ;
    up:annotation ?annotation .
                  ?annotation a up:Natural_Variant_Annotation ;
                  rdfs:comment ?text ;
                  up:substitution ?substitution ;
                  up:range/faldo:begin
                       [ faldo:position ?begin ;
                         faldo:reference ?sequence ] .
    ?sequence rdf:value ?value .
    BIND (substr(?value, ?begin, 1) as ?original) .
    FILTER(?original = 'Y' && ?substitution = 'F') .
}
</sparql>

<question>
Select all UniProt entries with annotated transmembrane regions and the regions' begin and end coordinates on the canonical sequence; show me at most 10
</question>
<sparql>
SELECT ?protein ?begin ?end
WHERE
{
    ?protein a up:Protein .
    ?protein up:annotation ?annotation .
    ?annotation a up:Transmembrane_Annotation .
    ?annotation up:range ?range .
    ?range faldo:begin/faldo:position ?begin .
    ?range faldo:end/faldo:position ?end
}
</sparql>

<question>
Select all UniProt entries that were integrated on the 30th of November 2010
</question>
<sparql>
SELECT ?protein
WHERE
{
    ?protein a up:Protein .
    ?protein up:created '2010-11-30'^^xsd:date
}
</sparql>

<question>
Was any UniProt entry integrated on the 9th of January 2013?
</question>
<sparql>
ASK
WHERE
{
    ?protein a up:Protein .
    ?protein up:created '2013-01-09'^^xsd:date
}
</sparql>

<question>
Construct new triples of the type 'HumanProtein' from all human UniProt entries
</question>
<sparql>
CONSTRUCT
{
    ?protein a up:HumanProtein .
}
WHERE
{
    ?protein a up:Protein .
    ?protein up:organism taxon:9606
}
</sparql>

<question>
Show me up to 30 triples that relate to the EMBL CDS entry AA089367.1
</question>
<sparql>
DESCRIBE <http://purl.uniprot.org/embl-cds/AAO89367.1>
</sparql>

<question>
Select all triples that relate to the taxon that describes Homo sapiens in the named graph for taxonomy
</question>
<sparql>
DESCRIBE taxon:9606
FROM <http://sparql.uniprot.org/taxonomy>
</sparql>

<question>
Select the average number of cross-references to the PDB database of UniProt entries that have at least one cross-reference to the PDB database
</question>
<sparql>
SELECT (AVG(?linksToPdbPerEntry) AS ?avgLinksToPdbPerEntry)
WHERE
{
    SELECT ?protein (COUNT(DISTINCT ?db) AS ?linksToPdbPerEntry)
    WHERE
    {
        ?protein a up:Protein .
        ?protein rdfs:seeAlso ?db .
        ?db up:database <http://purl.uniprot.org/database/PDB> .
    }
    GROUP BY ?protein ORDER BY DESC(?linksToPdbPerEntry)
}
</sparql>

<question>
Select the number of UniProt entries for each of the EC (Enzyme Commission) second level categories
</question>
<sparql>
SELECT ?enzyme (COUNT(?protein) as ?size)
WHERE
{
    VALUES (?ecClass) {(ec:1.-.-.-) (ec:2.-.-.-) (ec:3.-.-.-) (ec:4.-.-.-) (ec:5.-.-.-) (ec:6.-.-.-) (ec:7.-.-.-) }
    ?protein up:enzyme ?enzyme .
    ?enzyme rdfs:subClassOf ?ecClass .
}
GROUP BY ?enzyme ORDER BY ?enzyme
</sparql>

<question>
Find all Natural Variant Annotations if associated via an evidence tag to an article with a pubmed identifier
</question>
<sparql>
SELECT
    ?accession
    ?annotation_acc
    ?pubmed
WHERE
{
    ?protein a up:Protein ;
             up:annotation ?annotation .
    ?annotation a up:Natural_Variant_Annotation .
    ?linkToEvidence rdf:object ?annotation ;
                    up:attribution ?attribution .
    ?attribution up:source ?source .
    ?source a up:Journal_Citation .
    BIND(SUBSTR(STR(?protein),33) AS ?accession)
    BIND(IF(CONTAINS(STR(?annotation), "#SIP"), SUBSTR(STR(?annotation),33), SUBSTR(STR(?annotation),36))AS?annotation_acc)
    BIND(SUBSTR(STR(?source),35) AS ?pubmed)
}
</sparql>

<question>
Find how often an article in pubmed was used in an evidence tag in a human protein (ordered by most used to least)
</question>
<sparql>
SELECT
    ?source
    (COUNT(?attribution) AS ?attribitions)
WHERE
{
    ?protein a up:Protein ;
             up:organism taxon:9606 ;
	     up:annotation ?annotation .
    ?linkToEvidence rdf:object ?annotation ;
                    up:attribution ?attribution .
    ?attribution up:source ?source .
    ?source a up:Journal_Citation .
}
GROUP BY ?source ORDER BY DESC(COUNT(?attribution))
</sparql>

<question>
Find where disease related proteins are known to be located in the cell
</question>
<sparql>
SELECT
    ?protein
    ?disease
    ?location_inside_cell
    ?cellcmpt
WHERE
{
    ?protein up:annotation ?diseaseAnnotation , ?subcellAnnotation .
    ?diseaseAnnotation up:disease/skos:prefLabel ?disease .
    ?subcellAnnotation up:locatedIn/up:cellularComponent ?cellcmpt .
    ?cellcmpt skos:prefLabel ?location_inside_cell .
}
</sparql>

<question>
For two accessions find the GO term labels and group them into GO process,function and component
</question>
<sparql>
SELECT
    (CONCAT(SUBSTR(STR(?protein), 33)) AS ?uniprot)
    (GROUP_CONCAT(?celtype; separator=";") AS ?celtypes)
    (GROUP_CONCAT(?biotype; separator=";") AS ?biotypes)
    (GROUP_CONCAT(?moltype; separator=";") AS ?moltypes)
WHERE
{
    VALUES (?ac) {("Q6GZX4") ("Q96375")}
    BIND (IRI(CONCAT("http://purl.uniprot.org/uniprot/",?ac)) AS ?protein)
    ?protein a up:Protein .
    ?protein up:classifiedWith ?goTerm .
    #Determine if the type is biological_process
    OPTIONAL {
        ?goTerm rdfs:subClassOf <http://purl.obolibrary.org/obo/GO_0008150>.
        ?goTerm rdfs:label ?biotype .
    }
    #Determine if the type is cellular_component
    OPTIONAL {
        ?goTerm rdfs:subClassOf <http://purl.obolibrary.org/obo/GO_0005575>.
        ?goTerm rdfs:label ?celtype .
    }
    #Determine if the type is molecular_function
    OPTIONAL {
        ?goTerm rdfs:subClassOf <http://purl.obolibrary.org/obo/GO_0003674> .
        ?goTerm rdfs:label ?moltype .
    }
    #Filter out the uniprot keywords
    FILTER(bound(?biotype) || bound(?celtype) || bound(?moltype))
} GROUP BY ?protein
</sparql>

<question>
How many reviewed entries (Swiss-Prot) are related to kinase activity?
</question>
<sparql>
SELECT
    (COUNT(DISTINCT(?protein)) AS ?pc)
WHERE
{
    ?protein rdf:type up:Protein ;
             up:reviewed true  ;
             up:organism taxon:9606 ;
             up:classifiedWith|(up:classifiedWith/rdfs:subClassOf) GO:0016301 .
}
</sparql>

<question>
Find the release number of the uniprot data that is currently being queried
</question>
<sparql>
SELECT
    ?version
FROM <http://sparql.uniprot.org/.well-known/void>
WHERE
{
    [] <http://purl.org/pav/version> ?version
}
</sparql>

<question>
Find any uniprot entry which has a name 'HLA class I histocompatibility antigen, B-73 alpha chain'
</question>
<sparql>
SELECT ?protein ?anyKindOfName
WHERE
{
   ?protein a up:Protein .
   ?protein (up:recommendedName|up:alternativeName) ?structuredName .
   ?structuredName ?anyKindOfName  "HLA class I histocompatibility antigen, B-73 alpha chain" .
   ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .
}
</sparql>

<question>
Find any uniprot entry, or an uniprot entries domain or component which has a name 'HLA class I histocompatibility antigen, B-73 alpha chain'
</question>
<sparql>
SELECT ?protein ?anyKindOfName
WHERE
{
    ?protein a up:Protein .
    ?protein (up:recommendedName|up:alternativeName)|((up:domain|up:component)/(up:recommendedName|up:alternativeName)) ?structuredName .
    ?structuredName ?anyKindOfName  "HLA class I histocompatibility antigen, B-73 alpha chain" .
    ?anyKindOfName rdfs:subPropertyOf up:structuredNameType .
}
</sparql>

<question>
Show me all proteins that are located in the mitochondiron.
</question>
<sparql>
SELECT ?protein
WHERE {
    ?protein a up:Protein .
    ?protein up:annotation ?subcellAnnotation .
    ?subcellAnnotation up:locatedIn/up:cellularComponent ?cellcmpt .
    ?cellcmpt skos:prefLabel ?location_inside_cell .
    FILTER(REGEX(?location_inside_cell, "mitochondrion", "i"))
}
</sparql>

<question>
I'd like to see the entries for all proteins encoded by the gene PY17X_0934600
</question>
<sparql>
SELECT ?protein
WHERE {
    ?protein a up:Protein ;
        up:encodedBy/skos:prefLabel "PY17X_0934600" .
}
</sparql>

<question>
How many citations are there for papers by A. Bairoch?
</question>
<sparql>
SELECT (count(distinct ?citation) as ?numCitations)
WHERE
{
   ?protein a up:Protein ;
       up:citation ?citation .
   ?citation up:author "Bairoch A." .
}
</sparql>

<question>
Show me all citations by A. Bairoch
</question>
<sparql>
SELECT distinct ?citation
WHERE
{
   ?protein a up:Protein ;
       up:citation ?citation .
   ?citation up:author "Bairoch A." .
}
</sparql>

Here are some additional tips that you'll find helpful:

<tips>
<tip>To find the name of a GO class you can use rdfs:label.</tip>

<tip>to match against a GO class's label you can use a regex, like this: FILTER(REGEX(?label, "^text to match", "i")).</tip>

<tip>If the result contains a GO term, then also include each GO term's name in the output of the SELECT statement</tip>
</tips>

You can use the following keywords:

<keywords>
  <keyword><ARN>keywords:47</ARN><name>Antifreeze protein</name></keyword>
</keywords>

Now, it's your turn! Please convert the following question into a SPARQL query against the Uniprot knowledgebase that answers the question. You must wrap your answer in <sparql></sparql> tags.

<question>
{{question}}
</question>

Assistant:
<sparql>
